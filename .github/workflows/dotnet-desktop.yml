#此工作流使用未经GitHub认证的操作。
#它们由第三方提供，并由
#单独的服务条款、隐私政策和支持
#documentation。

#此工作流将生成、测试、签名和打包WPF或Windows窗体桌面应用程序
#基于.NET核心构建。
#了解如何将您现有的应用程序迁移到.NET Core，
#参考https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
#配置此工作流：
#
#1.配置环境变量
#GitHub为每个工作流运行设置默认环境变量。
#替换下面“env”部分中与项目相关的变量。
#
#2.签名
#在Windows应用程序中生成签名证书
#打包项目或将现有签名证书添加到项目中。
#下一步，使用PowerShell编码。使用Base64编码的PFX文件
#通过运行以下Powershell脚本生成输出字符串：
#
#$pfx_cert=获取内容'.\SigningCertificate.pfx'-编码字节
#[System.Convert]：：ToBase64String($pfx_cert)|Out-File'SigningCertificate_Encoded.txt'
#
#打开输出文件SigningCertificate_Encoded.txt，复制
#string inner。然后，将该字符串作为GitHub密钥添加到repo
#并将其命名为“Base64_Encoded_PFX”。
#有关如何配置签名证书的更多信息
#此工作流，请参考https://github.com/microsoft/github-actions-for-desktop-apps#签名
#
#最后，将签名证书密码作为密码添加到repo中，并将其命名为“PFX_Key”。
#请参阅下面的“生成Windows应用程序打包项目”，了解如何使用该密码。
#
#有关GitHub操作的更多信息，请参阅https://github.com/features/actions
#对于桌面应用程序的GitHub Action工作流的完整CI/CD示例，
#参考https://github.com/microsoft/github-actions-for-desktop-apps

姓名:.NET核心桌面

在……之上:
推:
分支机构:[ "主" ]
pull_request:
分支机构:[ "主" ]

工作:

建立:

策略:
矩阵:
配置:[调试,释放]

run-on:windows-最新#有关可用流道类型的列表，请参阅
                             #https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#个jobsjob_idruns-on

env:
解决方案名称(_N):您的解决方案名称#替换为您的解决方案名称，即MyWpfApp.SLN.
test_Project_Path:您的测试项目路径#替换为测试项目的路径，即MyWpfApp.Tests\MyWpfApp.Tests.csproj。
WAP项目目录:your-wap-project-directory-name#替换为相对于解决方案的WAP项目目录，即MyWpfApp。包。
WAP项目路径:your-wap-project-path#替换为WAP项目的路径，即MyWpf.App.Package\MyWpfApp.Package.wapproj。

步骤:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}

    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
